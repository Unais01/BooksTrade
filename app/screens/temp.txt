import React, { useState, useEffect, useCallback } from "react";
import { GiftedChat, Bubble } from "react-native-gifted-chat";
import { fetchMessages, sendMessage,getMessagesForChat } from "../../lib/appwrite"; // Import your Appwrite backend logic
import { useLocalSearchParams } from "expo-router";
import { useGlobalContext } from "../../context/GlobalProvider";

const ChatScreen = () => {
  // Accessing the userId, username, and avatar from the URL parameters
  const {
    userId: receiverID,
    username: receiverName,
    avatar: receiverAvatar,
  } = useLocalSearchParams();
  // Access logged-in user information from global context
  const { user } = useGlobalContext();
  const {
    username: loggedUserName,
    avatar: loggedUserAvatar,
    $id: loggedUserId,
  } = user;

  // State to hold messages
  const [messages, setMessages] = useState([]);
  const chatID =
    loggedUserId < receiverID
      ? `${loggedUserId}_${receiverID}`
      : `${receiverID}_${loggedUserId}`;

  useEffect(() => {
    const fetchMessages = async () => {
      try {
        const chatMessages = await getMessagesForChat(chatID);
        // Format the messages for Gifted Chat
        const formattedMessages = chatMessages.map((msg) => ({
          _id: msg.$id,
          text: msg.messageText,
          createdAt: new Date(msg.createdAt),
          user: {
            _id: msg.senderID,
            name: msg.senderName,
            avatar:
              msg.senderID === loggedUserId ? loggedUserAvatar : receiverAvatar,
          },
        }));
        setMessages(formattedMessages);
      } catch (error) {
        console.error("Error fetching messages:", error);
      }
    };

    fetchMessages();
  }, [chatID]);

 

  const onSend = useCallback(async (messages = []) => {
    try {
      const newMessage = messages[0]; // GiftedChat sends messages as an array, but we only send one message at a time

      // Send the message to Appwrite
      await sendMessage({
        text: newMessage.text,
        user: { _id: loggedUserId, name: loggedUserName, avatar: loggedUserAvatar },
        receiverID: receiverID,
        chatID: chatID,
      });

      // Append the message to the chat UI
      setMessages((previousMessages) => GiftedChat.append(previousMessages, messages));
    } catch (error) {
      console.error('Error sending message:', error);
    }
  }, [chatID]);



  const renderBubble = (props) => {
    return (
      <Bubble
        {...props}
        wrapperStyle={{
          left: {
            backgroundColor: "#f0f0f0", // Color for incoming messages
          },
          right: {
            backgroundColor: "#007aff", // Color for outgoing messages
          },
        }}
        textStyle={{
          left: {
            color: "#000", // Text color for incoming messages
          },
          right: {
            color: "#fff", // Text color for outgoing messages
          },
        }}
      />
    );
  };

  return (
    <GiftedChat
      messages={messages}
      onSend={(messages) => onSend(messages)}
      user={{
        _id: loggedUserId,        // The logged-in user (sender)
        name: loggedUserName,
        avatar: loggedUserAvatar,
      }}
    />
  );
};

export default ChatScreen;


working code of chat without realtime implementation